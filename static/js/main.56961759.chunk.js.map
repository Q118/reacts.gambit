{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chess","require","App","useState","chess","fen","setFen","className","width","position","onDrop","move","setTimeout","moves","length","computerMove","Math","floor","random","handleMove","from","sourceSquare","to","targetSquare","promotion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAOMA,EAAQC,EAAQ,IAoEPC,EA/DO,WAAO,IAAD,EACXC,mBACf,IAAIH,EAAM,6DADJI,EADoB,sBAKND,mBAASC,EAAMC,OALT,mBAKrBA,EALqB,KAKhBC,EALgB,KA0C3B,OACG,sBAAKC,UAAU,cAAf,UACE,oBAAIA,UAAW,QAAf,oDACA,cAAC,IAAD,CACEC,MAAO,IACPC,SAAUJ,EAIVK,OAAQ,SAACC,GAAD,OAzCG,SAACA,GACfP,EAAMO,KAAKA,KAEZC,YAAW,WACT,IAAMC,EAAQT,EAAMS,QACpB,GAAIA,EAAMC,OAAS,EAAG,CAEpB,IAAMC,EAAcF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,SAC3DV,EAAMO,KAAKI,GACXT,EAAOF,EAAMC,UAEd,KAEHC,EAAOF,EAAMC,QA6BPc,CAAW,CACTC,KAAMT,EAAKU,aACXC,GAAIX,EAAKY,aACTC,UAAW,aCrDRC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.56961759.chunk.js","sourcesContent":["/** @format */\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Chessboard from \"chessboardjsx\";\nimport { ChessInstance, ShortMove } from \"chess.js\";\n\nconst Chess = require(\"chess.js\");\n\n// by using chess, we will allow users to only make valid moves. \n  //and play random computer move\n\nconst App: React.FC = () => {\n\tconst [chess] = useState<ChessInstance>(\n\t\tnew Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\")\n\t);\n\nconst [fen, setFen] = useState(chess.fen());\n\n\n// the handleMove function takes in a ShortMove from chess.js\n// shortMove is an object which has (from), (to), (promotion) properties\nconst handleMove = (move: ShortMove) => {\n  if(chess.move(move)) {\n    \n    setTimeout(() => {\n      const moves = chess.moves();\n      if (moves.length > 0) {\n        // console.log(\"moving\");\n        const computerMove= moves[Math.floor(Math.random() * moves.length)];\n        chess.move(computerMove);\n        setFen(chess.fen());\n        }\n    }, 300);\n    \n    setFen(chess.fen());\n  }\n};\n\n//first thing we do in handleMove is make the move on chess.js.\n//if passed move is valid, it'll return a valid full move otherwise null\n//if a played move was valid, we take the updated fen from chess.js and update the fen state.\n\n\n// after, updating the fen, we set a timeout from 300ms\n  //get all thevalid moves by using moves() which return array of moves.\n  //pick a random move and play it on the chess.js and update the fen again\n    //this continues until the game is over\n\n//when onDrop is called we convert sourceSquare and targetSquare to ShortMove\n// we are passing promotion as (q) \n    //Telling chess.js to auto-promote to queen whenever a promtion happens\n\n\n\treturn (\n    <div className=\"flex-center\">\n      <h1 className= \"title\">S.Bear's First Programmatic ChessBoard</h1>\n      <Chessboard\n        width={400}\n        position={fen}\n        // adding onDrop prop to Chessboard component.\n        // onDrop is called whenever a piece is picked and dropped on the board.\n        // passing us the sourceSquare (from square) and targetSquare (to square)\n        onDrop={(move) =>\n          handleMove({\n            from: move.sourceSquare,\n            to: move.targetSquare,\n            promotion: \"q\",\n          })\n        }\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}